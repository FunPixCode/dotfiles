* GC tuning
Display message after GC
#+BEGIN_SRC emacs-lisp
  (setq garbage-collection-messages t)
#+END_SRC
Set GC threshold to 50MB
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 50 1024 1024))
#+END_SRC
* Backup
Backup files covered by version control
#+BEGIN_SRC emacs-lisp
  (setq vc-make-backup-files t)
#+END_SRC
Backup by copying
#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t)
#+END_SRC
Delete old versions
#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t)
#+END_SRC
Keep new versions
#+BEGIN_SRC emacs-lisp
  (setq kept-new-versions 6)
#+END_SRC
Keep old versions
#+BEGIN_SRC emacs-lisp
  (setq kept-old-versions 3)
#+END_SRC
Numeric backup versions
#+BEGIN_SRC emacs-lisp
  (setq version-control t)
#+END_SRC
Backup directory
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC
* Auto-save
Auto save directory
#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC
* Package loading
Report about package loading and customizing packages
#+BEGIN_SRC emacs-lisp
  (setq use-package-verbose t)
#+END_SRC
* Customize GUI
No startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC
No scratch message
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message "")
#+END_SRC
No splash screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC
No scroll/menu/tool for graphical mode
#+BEGIN_SRC emacs-lisp
  (when window-system
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1))
#+END_SRC
No visual notifications
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
Set utf-8
#+BEGIN_SRC emacs-lisp
  (setq-default buffer-file-coding-system 'utf-8-auto-unix)
  (setq locale-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
Highlight current line
#+BEGIN_SRC emacs-lisp
  (when window-system
    (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC
Show line numbers in fringe
This is a new native implementation (looks a bit weird |fringe|numbers|)
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC
Show line number in mode line
#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
#+END_SRC
Show column number in mode line
#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
#+END_SRC
No cursor blinking
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC
Scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
Delay for paren coloring
#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
#+END_SRC
Coloring style
#+BEGIN_SRC emacs-lisp
  (setq show-paren-style 'expression)
#+END_SRC
Blink for matching parens
#+BEGIN_SRC emacs-lisp
  (setq blink-matching-paren nil)
#+END_SRC
Enable show paren mode
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
Auto insert closing paren
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC
Auto indent
#+BEGIN_SRC emacs-lisp
  (electric-indent-mode t)
#+END_SRC
Do not indent with tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
Tab width (number of spaces used for one tab)
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC
Try indent, complete otherwise
#+BEGIN_SRC emacs-lisp
  (setq tab-always-indent 'complete)
#+END_SRC
Display warning when file size > 15MB
#+BEGIN_SRC emacs-lisp
  (setq large-file-warning-threshold (* 15 1024 1024))
#+END_SRC
Change verbose yes-or-no to y-or-n
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
Dired recursive delete and copy
#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies 'always)
#+END_SRC
Lone wrapping after 90
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 90)
#+END_SRC
Resize mini windows
#+BEGIN_SRC emacs-lisp
  (setq resize-mini-windows t)
  (setq max-mini-window-height 0.33)
#+END_SRC
Sentence end
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC
Offset
#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4) ;;offset used by + & -
#+END_SRC
Font
#+BEGIN_SRC emacs-lisp
  (when (member "CodeNewRoman Nerd Font Mono" (font-family-list))
    ;; (set-face-attribute 'default nil :font "CodeNewRoman Nerd Font-11")
    ;; (set-face-attribute 'default nil
    ;;                     :font "CodeNewRoman Nerd Font Mono"
    ;;                     :height 113
    ;;                     :weight 'normal
    ;;                     :width 'normal)
    (set-frame-font "CodeNewRoman Nerd Font Mono-12"))
#+END_SRC
Default theme
#+BEGIN_SRC emacs-lisp
  ;; (load-theme 'leuven t)
#+END_SRC
Solarized
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :init
    (setq solarized-high-contrast-mode-line t)
    (setq solarized-distinct-fringe-background t)
    (setq solarized-use-variable-pitch t) ;; Don't change the font for some headings and titles
    (setq solarized-use-less-bold t)  ;; Use less bolding
    (setq solarized-use-more-italic t)  ;; Use more italics
    (setq solarized-emphasize-indicators nil) ;; Use less colors for indicators such as git:gutter, flycheck and similar
    (setq solarized-scale-org-headlines nil) ;; Don't change size of org-mode headlines (but keep other size-changes)
    ;; Avoid all font-size changes
    (setq solarized-height-minus-1 1.0)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    :config
    (load-theme 'solarized-light t)
    :pin melpa-stable)
#+END_SRC
Doneburn (sunburn) light
#+BEGIN_SRC emacs-lisp
  ;; (use-package doneburn-theme
  ;;   :ensure t
  ;;   :config (load-theme 'doneburn 'no-confirm))
#+END_SRC
Material theme dark/light
#+BEGIN_SRC emacs-lisp
  ;; (use-package material-theme
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'material-light t)
  ;;   ;; (load-theme 'material t)
  ;;   :pin melpa-stable)
#+END_SRC
* Secret
#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/.emacs.secrets")
      (load-file "~/.emacs.secrets"))
#+END_SRC
* Exec path
Common executables path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "/usr/local/bin")
#+END_SRC
Local executables path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "~/.local/bin")
#+END_SRC
Path to nvim executables
#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "~/.nvm/versions/node/v8.11.3/bin")
#+END_SRC
* Disable C-z (ctrl + z)
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
#+END_SRC
* Elisp
#+BEGIN_SRC emacs-lisp
  ;; (use-package elisp-mode
  ;;   :ensure nil
  ;;   :delight emacs-lisp-mode "Î¾")
#+END_SRC
* Eldoc
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish "")
  (add-hook 'prog-mode-hook 'eldoc-mode)
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'flycheck-mode)
    :pin melpa-stable)
#+END_SRC
* Org
Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :init
    (setq org-startup-indented t)
    (setq org-log-done t)
    (setq org-fontify-whole-heading-line t)
    (setq org-fontify-done-headline t)
    (setq org-fontify-quote-and-verse-blocks t))
#+END_SRC
Org indent
#+BEGIN_SRC emacs-lisp
  (use-package org-indent
    :config
    (add-hook 'org-mode-hook (lambda () (diminish 'org-indent-mode ""))))
#+END_SRC
Make org bullets look better
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode t))))
#+END_SRC
* Hide-show
Evil mappings
za - toggle
zc - close
zo - open
zm - close all
zr - open all
#+BEGIN_SRC emacs-lisp
  (use-package hideshow
    :diminish (hs-minor-mode . "")
    :config
    (add-hook 'prog-mode-hook 'hs-minor-mode))
#+END_SRC
* Evil
Evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-shift-width 2)
    :config
    (evil-mode t)
    :pin melpa-stable)
#+END_SRC
Evil leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :after (evil)
    :config
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "f" 'find-file
      "b" 'switch-to-buffer
      "k" 'kill-buffer
      "gg" 'grep
      "ms" 'bookmark-set
      "md" 'bookmark-delete
      "mr" 'bookmark-rename
      "ml" 'helm-bookmarks
      "li" 'linum-mode)
    (global-evil-leader-mode t)
    :pin melpa-stable)
#+END_SRC
Nerd commenter
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    :after (evil)
    :config
    (evil-leader/set-key
      "ci" 'evilnc-comment-or-uncomment-lines
      "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
      "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
      "cc" 'evilnc-copy-and-comment-lines
      "cp" 'evilnc-comment-or-uncomment-paragraphs
      "cr" 'comment-or-uncomment-region
      "cv" 'evilnc-toggle-invert-comment-line-by-line
      "."  'evilnc-copy-and-comment-operator
      "\\" 'evilnc-comment-operator ; if you prefer backslash key
      )
    :pin melpa-stable)
#+END_SRC
Evil numbers
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :ensure t
    :after (evil)
    :config
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))
#+END_SRC
Evil lion
#+BEGIN_SRC emacs-lisp
  (use-package evil-lion
    :ensure t
    :after (evil)
    :config
    (evil-lion-mode))
#+END_SRC
* Which key
Display key bindings while pressing
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish ""
    :init
    (setq which-key-sort-order 'which-key-key-order-alpha)
    :config
    (which-key-mode t)
    :pin melpa-stable)
#+END_SRC
* Popup kill-ring
Set kill-ring size
#+BEGIN_SRC emacs-lisp
  (setq kill-ring-max 100)
#+END_SRC
Display removedd text in popup
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish " â"
    :config
    (setq company-idle-delay 0.3)
    (setq company-show-numbers t)
    (setq company-minimum-prefix-length 2)
    (add-hook 'prog-mode-hook #'company-mode)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort)
    :pin melpa-stable)
#+END_SRC
* Undo-tree
Allow to perform undo operation on buffer also visualize the changes as tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish ""
    :bind* (("M-m u" . undo-tree-undo)
            ("M-m r" . undo-tree-redo)
            ("M-m U" . undo-tree-visualize))
    :config
    (global-undo-tree-mode t)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)
    :pin melpa)
#+END_SRC
* YaSnippet
Snippet support
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish (yas-minor-mode . " Î")
    :config
    (yas-global-mode t)
    (yas-reload-all)
    (evil-leader/set-key
      "yi" 'yas-insert-snippet)
    :pin melpa-stable)
#+END_SRC
* Whitespace
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure t
    :diminish (whitespace-mode . "")
    :init
    (dolist (hook '(prog-mode-hook text-mode-hook))
      (add-hook hook 'whitespace-mode))
    (add-hook 'before-save-hook 'whitespace-cleanup)
    :config
    (setq whitespace-line-column 90) ;; limit line length
    (setq whitespace-style '(face tabs empty trailing lines-tail)))
#+END_SRC
* Neo-tree
Like NerdTree for vim
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :init
    (setq neo-theme 'ascii)
    :config
    (evil-leader/set-key
      "t" 'neotree-toggle)
    (add-hook 'neotree-mode-hook
              (lambda ()
                (evil-local-set-key 'normal (kbd "q") 'neotree-hide)
                (evil-local-set-key 'normal (kbd "I") 'neotree-hidden-file-toggle)
                (evil-local-set-key 'normal (kbd "z") 'neotree-stretch-toggle)
                (evil-local-set-key 'normal (kbd "RET") 'neotree-enter)
                (evil-local-set-key 'normal (kbd "g") 'neotree-refresh)
                (evil-local-set-key 'normal (kbd "c") 'neotree-create-node)
                (evil-local-set-key 'normal (kbd "d") 'neotree-delete-node)
                (evil-local-set-key 'normal (kbd "r") 'neotree-rename-node)
                (evil-local-set-key 'normal (kbd "s") 'neotree-enter-vertical-split)
                (evil-local-set-key 'normal (kbd "S") 'neotree-enter-horizontal-split)))
    :pin melpa-stable)
#+END_SRC
* Rainbow
When emacs encounters a hex color, it will auto highlight it
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :diminish rainbow-mode
    :config
    (add-hook 'prog-mode-hook #'rainbow-mode))
#+END_SRC
* Rainbow delimiters
Display each level of parens with different color
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    :pin melpa-stable)
#+END_SRC
* Highlight symbol
Highlight selected symbol, use different color for each
#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :ensure t
    :config
    (evil-leader/set-key
      "hl" 'highlight-symbol)
    :pin melpa-stable)
#+END_SRC
* Magit
Git support
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :commands (magit-status magit-blame magit-blame-quit magit-log)
    :init
    (evil-leader/set-key
      "gs" 'magit-status
      "gb" 'magit-blame
      "gB" 'magit-blame-quit
      "gl" 'magit-log)
    :pin melpa-stable)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :bind* (("M-m SPC d"   . projectile-find-file)
            ("M-m SPC D"   . projectile-switch-project)
            ("M-m SPC TAB" . projectile-find-other-file))
    :init
    (setq projectile-file-exists-remote-cache-expire (* 10 60))
    :config
    (projectile-global-mode t))
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :config
    (require 'helm-config)
    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "C-x b") 'helm-buffers-list)
    (global-set-key (kbd "C-x r b") 'helm-bookmarks);; making: C-x r m, C-x r b
    (helm-mode 1)
    (evil-leader/set-key
      "hr" 'helm-register
      "ht" 'helm-top
      "hm" 'helm-mini
      "hb" 'helm-buffers-list
      "ho" 'helm-occur
      "hk" 'helm-show-kill-ring)
    :pin melpa-stable)
#+END_SRC
* Helm projectile
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t
    :after (projectile helm)
    :bind* (("M-m SPC p" . helm-projectile))
    :init
    (setq projectile-completion-systtem 'helm)
    :config
    (evil-leader/set-key
      "pf" 'helm-projectile-find-file
      "pg" 'helm-projectile-grep
      "pp" 'helm-projectile)
    :pin melpa-stable)
#+END_SRC
* Powerline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :init
    (setq-default powerline-default-separator 'slant)
    (setq-default powerline-gui-use-vcs-glyph t)
    (setq-default powerline-height 24)
    (setq-default powerline-default-separator-dir '(right . right))
    :config
    (powerline-center-evil-theme))
#+END_SRC
* Spaceline
#+BEGIN_SRC emacs-lisp
  ;; (use-package spaceline
  ;;   :ensure t
  ;;   :after (evil)
  ;;   :init
  ;;   ;; (setq powerline-image-apple-rgb t)
  ;;   ;; (setq powerline-default-separator 'utf-8)
  ;;   (setq powerline-default-separator 'wave)
  ;;   (require 'spaceline-config)
  ;;   (spaceline-spacemacs-theme)
  ;;   ;; (spaceline-emacs-theme)
  ;;   (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  ;;   (set-face-attribute 'spaceline-evil-emacs nil :background "#be84ff")
  ;;   (set-face-attribute 'spaceline-evil-insert nil :background "#5fd7ff")
  ;;   (set-face-attribute 'spaceline-evil-motion nil :background "#ae81ff")
  ;;   (set-face-attribute 'spaceline-evil-normal nil :background "#a6e22e")
  ;;   (set-face-attribute 'spaceline-evil-replace nil :background "#f92672")
  ;;   (set-face-attribute 'spaceline-evil-visual nil :background "#fd971f")
  ;;   (spaceline-helm-mode)
  ;;   (setq-default
  ;;    powerline-height 20
  ;;    powerline-gui-use-vcs-glyph t
  ;;    spaceline-minor-modes-separator " ")
  ;;   :pin melpa-stable)
#+END_SRC
* Json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :mode "\\.json$"
    :pin melpa-stable)
#+END_SRC
* Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode "\\.yml$"
    :pin melpa-stable)
#+END_SRC
* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("\\.markdown\\'" "\\.mkd\\'" "\\.md\\'")
    :pin melpa-stable)
#+END_SRC
* Less & Css
#+BEGIN_SRC emacs-lisp
  (use-package less-css-mode
    :ensure t
    :mode ("\\.css\\'" "\\.less\\'")
    :pin melpa-stable)
#+END_SRC
* Web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.html$" . web-mode)
    :pin melpa-stable)
#+END_SRC
* TypeScript
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :ensure t
    :pin melpa-stable)

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  ;; (add-hook 'before-save-hook 'tide-format-before-save)

  (add-hook 'typescript-mode-hook 'setup-tide-mode)
#+END_SRC
* JavaScript
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode ("\\.js$" . js2-mode)
    :config
    :pin melpa-stable)
#+END_SRC
* JSX
#+BEGIN_SRC emacs-lisp
  (use-package jsx-mode
    :ensure t
    :after (js2-mode)
    :pin melpa-stable)
#+END_SRC
* Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :mode ("\\.hs$" . haskell-mode)
    :config
    :pin melpa-stable)
#+END_SRC
Intero mode for haskell
#+BEGIN_SRC emacs-lisp
  (use-package intero
    :ensure t
    :after (haskell-mode)
    :config
    (add-hook 'haskell-mode-hook #'intero-mode)
    :pin melpa)
#+END_SRC
Hindent mode for haskell
#+BEGIN_SRC emacs-lisp
  (use-package hindent
    :ensure t
    :after (intero)
    :config
    (add-hook 'haskell-mode-hook #'hindent-mode)
    :pin melpa-stable)
#+END_SRC
* Groovy
#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :ensure t
    :pin melpa-stable)
#+END_SRC
* Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :pin melpa-stable)
#+END_SRC
* Dockerfile
Docker major mode by Spotify
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :pin melpa-stable)
#+END_SRC
* Local scripts
#+BEGIN_SRC emacs-lisp
  (use-package yalsp
    :load-path "~/workspace/projects/elisp/yalsp")
  (require 'yalsp)
  ;; (use-package espresso
  ;;   :load-path "~/workspace/projects/elisp/espresso")
  ;; (require 'espresso)
#+END_SRC
